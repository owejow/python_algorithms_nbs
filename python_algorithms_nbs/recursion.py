#AUTOGENERATED! DO NOT EDIT! File to edit: dev/04_recursion.ipynb (unless otherwise specified).

__all__ = ['factorial', 'draw_line', 'draw_interval', 'draw_ruler', 'disk_usage']

#Cell

# O(n) using n+1 activations each of which use O(1) operations
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n-1)

#Cell

# for c >=0 a call to draw_interval(c) results in precisely 2^c - 1 calls
def draw_line(tick_length, tick_label=""):
    """Draw line with given tick length and optional label"""
    line = '-'*tick_length
    if tick_label:
        line += ' ' + tick_label
    print(line)

#Cell
def draw_interval(center_length):
    """Draw tick length based upon a central tick length"""
    if center_length > 0:
        draw_interval(center_length-1)
        draw_line(center_length)
        draw_interval(center_length-1)

#Cell
def draw_ruler(num_inches, major_length):
    """draw english ruler with given number of inches and number of subdivisions"""
    draw_line(major_length, str(0))
    for i in range(1, 1+ num_inches):
        draw_interval(major_length-1)
        draw_line(major_length, str(i))

#Cell
def disk_usage(path):
    """returns disk usage for a path"""
    total = os.path.getsize(path)
    if os.path.isdir(path):
        for filename in os.listdir(path):
            child_path = os.path.join(path, filename)
            total += disk_usage(child_path)
    print(f"{total:<10} {path}")
    return total